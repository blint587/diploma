/*
##########################################################################
DO NOT EDIT THIS FILE DIRECTLY! IT IS GENERATED FROM DATABASE INFORMATION.
##########################################################################
 */

#include <vector>
#include "dynamic.hpp"
#include "unit.hpp"

const std::vector<munits::Metric> & munits::GetMatrix(){
    static const std::vector<munits::Metric> matrix = {
            {{1,  0, 0,  0, 0, 0, 0}, "m", {}, //Length
                    {
                            {"inc", std::make_shared<munits::Unit>(munits::Unit(0.0254, 0., "inc"))},
                            {"ft",  std::make_shared<munits::Unit>(munits::Unit(0.3048, 0., "ft"))},
                            {"mi", std::make_shared<munits::Unit>(munits::Unit(1609.344, 0., "mi"))},
                            {"yd", std::make_shared<munits::Unit>(munits::Unit(0.914, 0., "yd"))}
                    }

            },
            {{0,  1, 0,  0, 0, 0, 0}, "g", {}, // Mass
                    {
                            {"oz",  std::make_shared<munits::Unit>(munits::Unit(28.3495, 0., "oz"))},
                            {"lb",  std::make_shared<munits::Unit>(munits::Unit(453.592, 0., "lb"))},
                            {"t",  std::make_shared<munits::Unit>(munits::Unit(1e6, 0., "t"))},

                    }
            },
            {{0,  0, 1,  0, 0, 0, 0}, "s", {}, //Time
                    {
                            {"min", std::make_shared<munits::Unit>(munits::Unit(60., 0., "min", false))},
                            {"h",   std::make_shared<munits::Unit>(munits::Unit(3600., 0., "h", false))},
                            {"d",  std::make_shared<munits::Unit>(munits::Unit(86400., 0., "d", false))}
                    }
            },
            {{0,  0, 0,  1, 0, 0, 0}, "A"},  //Electric Currency
            {{0,  0, 0,  0, 1, 0, 0}, "K",  //Temperature
                                           {"E", "P", "T", "G", "M", "k", "h", "da", "d", "c", "m", "μ", "n", "p", "f", "a"},
                    {
                            {"°C",  std::make_shared<munits::Unit>(munits::Unit(1., 273.15, "C", false))},
                            {"°F",  std::make_shared<munits::Unit>(munits::Unit(5. / 9., 459.67, "F", false))}
                    }
            },
            {{0,  0, 0,  0, 0, 1, 0}, "mol"},  //Amount of Substance
            {{0,  0, 0,  0, 0, 0, 1}, "cd"}, //Luminous Intensity
            {{2,  0, 0,  0, 0, 0, 0}, "m"}, //Area
            {{3,  0, 0,  0, 0, 0, 0}, "m", {}, //Volume
                    {
                            {"l",   std::make_shared<munits::Unit>(munits::Unit(0.001, 0., "l", true, true))},
                            {"gal", std::make_shared<munits::Unit>(munits::Unit(0.00378541178, 0., "gal", true, true))},
    //                            {"oz", make_shared<munits::Unit>(munits::Unit(2.957e-5, 0., "oz", true, true))},
                    }

            },
            {{3,  0, -1, 0, 0, 0, 0}, "m3 s-1"},  //VolumetricFlow
            {{-3, 0, 0,  0, 0, 1, 0}, "mol m-3"},  //MolarConcentration
            {{1,  0, -2, 0, 0, 0, 0}, "m s-2"},  //Acceleration
            {{1,  1, -2, 0, 0, 0, 0}, "kg m s-2"},  //Force
            {{1,  0, -1, 0, 0, 0, 0}, "kg m s-2"},  //Velocity
            {{-3, 1, 0,  0, 0, 0, 0}, "kg m-3"},  //Concentration
            {{0,  0, 0,  0, 0, 0, 0}, ""}, //_Last

    };
    return matrix;
}

const int munits::GetMatrixIndex(std::vector<int> & searched){

    auto rmatrix = munits::GetMatrix();
    return find_if(rmatrix.begin(), rmatrix.end(), [&](munits::Metric x) { return x.dim_vector == searched; }) - rmatrix.begin();

}